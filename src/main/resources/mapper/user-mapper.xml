<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.UserMapper">

    <!--为了复用 -->
    <sql id="selectFields">
        id,username,password,salt,email,type,status,activation_code,header_url,create_time
    </sql>

    <sql id="insertFields">
        username,password,salt,email,type,status,activation_code,header_url,create_time
    </sql>



<!--  id 要写对应的方法名   resultType:返回的类型，配置文件中已经配置爱了前面的报名，
后面直接写返回的类名就可以了,#{id}表示要引用方法传过来的参数id-->
    <select id="selectById" resultType="User">
        select <include refid="selectFields"> </include>
        from User where id = #{id}
    </select>

    <select id="selectByName" resultType="User">
        select <include refid="selectFields"> </include>
        from User where username = #{username}
    </select>

    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"> </include>
        from User where email = #{email}
    </select>


    <!-- parameterType这个如果是简单的类型int String这种可以省略，如果是复杂的参数Bean则需要声明，
    因为默认无法识别，不是Java自带的类型。
    keyProperty：告诉他id字段逐渐对应的类型是什么，因为增加的时候，mysql底层会自动生成id,mybatis会从
      mysql那得到id填入这个user里，所以这个id是mybatis从数据库获取到回填进去的-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into User(<include refid="insertFields"> </include>)
        values(#{username},#{password},#{salt},#{email},#{type},#{status},#{activationCode},
        #{headerUrl},#{createTime})

    </insert>

    <update id="updateStatus">
        update user set status=#{status} where id=#{id}
    </update>

    <update id="updateHeader">
        update user set header_url=#{headerUrl} where id=#{id}
    </update>
    <update id="updatePassword">
        update user set password=#{password} where id=#{id}
    </update>
</mapper>